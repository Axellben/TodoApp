{"version":3,"sources":["NewTodoForm.js","Todo.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["NewTodoForm","props","state","todo","onChange","bind","onSubmit","evt","this","setState","target","value","preventDefault","addTodo","className","htmlFor","type","name","id","placeholder","Component","Todo","editing","onEdit","onSave","updateTodo","onClick","toggleCompletion","completed","removeTodo","TodoList","todos","newTodo","uuidv4","filter","updatedTodo","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.95a5e6ea.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./NewTodoForm.css\";\n\nclass NewTodoForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todo: \"\",\n    };\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onChange(evt) {\n    this.setState({\n      todo: evt.target.value,\n    });\n  }\n\n  onSubmit(evt) {\n    evt.preventDefault();\n    this.props.addTodo(this.state.todo);\n    this.setState({\n      todo: \"\",\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"NewTodoForm\">\n        <form onSubmit={this.onSubmit}>\n          <label htmlFor=\"todo\">New Todo</label>\n          <br />\n          <input\n            type=\"text\"\n            name=\"todo\"\n            id=\"todo\"\n            value={this.state.todo}\n            onChange={this.onChange}\n            placeholder=\"New Todo\"\n          />\n          <button>ADD TODO</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default NewTodoForm;\n","import React, { Component } from \"react\";\nimport \"./Todo.css\";\n\nclass Todo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { editing: false, todo: this.props.todo.todo };\n    this.onEdit = this.onEdit.bind(this);\n    this.onSave = this.onSave.bind(this);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(evt) {\n    this.setState({\n      todo: evt.target.value,\n    });\n  }\n\n  onEdit() {\n    this.setState((state) => ({\n      editing: !state.editing,\n    }));\n  }\n\n  onSave(evt) {\n    evt.preventDefault();\n    this.props.updateTodo({ todo: this.state.todo, id: this.props.todo.id });\n    this.setState((state) => ({\n      editing: !state.editing,\n    }));\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.editing ? (\n          <div className=\"Todo-edit-form\">\n            <form onSubmit={this.onSave}>\n              <input\n                type=\"text\"\n                name=\"todo\"\n                value={this.state.todo}\n                onChange={this.onChange}\n              ></input>\n              <button>Save</button>\n            </form>\n          </div>\n        ) : (\n          <div className=\"Todo\">\n            <li\n              onClick={this.props.toggleCompletion}\n              className={this.props.todo.completed ? \"completed \" : \"\"}\n            >\n              {this.props.todo.todo}\n            </li>\n\n            <div className=\"Todo-buttons\">\n              <button onClick={this.onEdit} className=\"fas fa-edit\"></button>\n              <button\n                onClick={this.props.removeTodo}\n                className=\"fas fa-trash\"\n              ></button>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Todo;\n","import React, { Component } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport NewTodoForm from \"./NewTodoForm\";\nimport Todo from \"./Todo\";\nimport \"./TodoList.css\";\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: [],\n    };\n    this.addTodo = this.addTodo.bind(this);\n    this.updateTodo = this.updateTodo.bind(this);\n  }\n\n  addTodo(todo) {\n    const newTodo = { todo, id: uuidv4(), completed: false };\n    this.setState({\n      todos: [...this.state.todos, newTodo],\n    });\n  }\n\n  removeTodo(id) {\n    this.setState((state) => ({\n      todos: state.todos.filter((todo) => todo.id !== id),\n    }));\n  }\n\n  updateTodo(updatedTodo) {\n    this.setState((state) => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id === updatedTodo.id) {\n          return { ...todo, todo: updatedTodo.todo };\n        }\n        return todo;\n      }),\n    }));\n  }\n\n  toggleCompletion(id) {\n    this.setState((state) => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id === id) {\n          return { ...todo, completed: !todo.completed };\n        }\n        return todo;\n      }),\n    }));\n  }\n\n  render() {\n    return (\n      <div className=\"TodoList\">\n        <h1>\n          Todo app! <span>An Animated Todo List Made With React.</span>\n        </h1>\n        <ul>\n          {this.state.todos.map((todo) => (\n            <Todo\n              todo={todo}\n              key={todo.id}\n              removeTodo={() => this.removeTodo(todo.id)}\n              updateTodo={this.updateTodo}\n              toggleCompletion={() => this.toggleCompletion(todo.id)}\n            />\n          ))}\n        </ul>\n        <NewTodoForm addTodo={this.addTodo} />\n      </div>\n    );\n  }\n}\n\nexport default TodoList;\n","import React from \"react\";\nimport \"./App.css\";\nimport TodoList from \"./TodoList\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}